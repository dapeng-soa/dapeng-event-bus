 package com.today.baseEvent.serializer

import com.github.dapeng.core._
import com.github.dapeng.org.apache.thrift._
import com.github.dapeng.org.apache.thrift.protocol._

 /**
 * Autogenerated by Dapeng-Code-Generator (2.1.2-SNAPSHOT)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 **/

 class JsonEventSerializer extends BeanSerializer[com.today.baseEvent.JsonEvent]{

@throws[TException]
override def read(iprot: TProtocol):com.today.baseEvent.JsonEvent = {

 var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
 iprot.readStructBegin()

var id: Long = 0
 var json: String = null


while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

 schemeField = iprot.readFieldBegin

 schemeField.id match {

       case 1 =>
           schemeField.`type` match {
             case com.github.dapeng.org.apache.thrift.protocol.TType.I64 => id = iprot.readI64
             case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
     }

       case 2 =>
           schemeField.`type` match {
             case com.github.dapeng.org.apache.thrift.protocol.TType.STRING => json = iprot.readString
             case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
     }

   case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
 }
}

iprot.readFieldEnd
iprot.readStructEnd

val bean = com.today.baseEvent.JsonEvent(id = id,json = json)
validate(bean)

bean
}

@throws[TException]
override def write(bean: com.today.baseEvent.JsonEvent, oprot: TProtocol): Unit = {

validate(bean)
oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("JsonEvent"))


     {
     val elem0 = bean.id
     oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("id", com.github.dapeng.org.apache.thrift.protocol.TType.I64, 1.asInstanceOf[Short]))
     oprot.writeI64(elem0)
     oprot.writeFieldEnd

     }
     {
     val elem1 = bean.json
     oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("json", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, 2.asInstanceOf[Short]))
     oprot.writeString(elem1)
     oprot.writeFieldEnd

     }
oprot.writeFieldStop
oprot.writeStructEnd
}

@throws[TException]
override def validate(bean:com.today.baseEvent.JsonEvent): Unit = {

       if(bean.json == null)
       throw new SoaException(SoaCode.StructFieldNull, "json字段不允许为空")

}


   @throws[TException]
   override def toString(bean: com.today.baseEvent.JsonEvent): String = if (bean == null) "null" else bean.toString

 }
        
      